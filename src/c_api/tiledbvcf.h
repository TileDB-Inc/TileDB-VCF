/**
 * @file   tiledbvcf.h
 *
 * @section LICENSE
 *
 * The MIT License
 *
 * @copyright Copyright (c) 2019 TileDB, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * @section DESCRIPTION
 *
 * This file declares the C API for TileDB-VCF.
 */

#ifndef TILEDB_VCF_H
#define TILEDB_VCF_H

// Generated by CMake; defines TILEDBVCF_EXPORT (etc) macros.
#include "tiledbvcf_export.h"

#include <stdint.h>

#ifdef __cplusplus
extern "C" {
#endif

/* ********************************* */
/*             CONSTANTS             */
/* ********************************* */

/** Success */
#define TILEDB_VCF_OK 0
/** General error */
#define TILEDB_VCF_ERR (-1)

/** Returns the sentinel used to indicate 'no value' for int32 datatypes. */
TILEDBVCF_EXPORT int32_t tiledb_vcf_null_int32();

/** Returns the sentinel used to indicate 'no value' for float datatypes. */
TILEDBVCF_EXPORT float tiledb_vcf_null_float32();

/* ********************************* */
/*               ENUMS               */
/* ********************************* */

/** Reader status. */
typedef enum {
/** Helper macro for defining read reader status enums. */
#define TILEDB_VCF_READ_STATUS_ENUM(id) TILEDB_VCF_##id
#include "tiledbvcf_enum.h"
#undef TILEDB_VCF_READ_STATUS_ENUM
} tiledb_vcf_read_status_t;

/** Attribute datatype. */
typedef enum {
/** Helper macro for defining attribute datatype enums. */
#define TILEDB_VCF_ATTR_DATATYPE_ENUM(id) TILEDB_VCF_##id
#include "tiledbvcf_enum.h"
#undef TILEDB_VCF_ATTR_DATATYPE_ENUM
} tiledb_vcf_attr_datatype_t;

/* ********************************* */
/*           STRUCT TYPES            */
/* ********************************* */

/** Reader object. */
typedef struct tiledb_vcf_reader_t tiledb_vcf_reader_t;

/** Writer object. */
typedef struct tiledb_vcf_writer_t tiledb_vcf_writer_t;

/** Error object. */
typedef struct tiledb_vcf_error_t tiledb_vcf_error_t;

/* ********************************* */
/*              READER               */
/* ********************************* */

/**
 * Allocate a VCF reader object.
 *
 * @param reader Will be set to point at the allocated reader object.
 * @return `TILEDB_VCF_OK` for success or `TILEDB_VCF_ERR` for error.
 */
TILEDBVCF_EXPORT int32_t tiledb_vcf_reader_alloc(tiledb_vcf_reader_t** reader);

/**
 * Free the given VCF reader object.
 *
 * @param reader Pointer to reader object to free.
 */
TILEDBVCF_EXPORT void tiledb_vcf_reader_free(tiledb_vcf_reader_t** reader);

/**
 * Initializes the reader for reading from the dataset at the given URI.
 *
 * @param reader VCF reader object
 * @param dataset_uri URI of TileDB VCF dataset
 * @return `TILEDB_VCF_OK` for success or `TILEDB_VCF_ERR` for error.
 */
TILEDBVCF_EXPORT int32_t
tiledb_vcf_reader_init(tiledb_vcf_reader_t* reader, const char* dataset_uri);

/**
 * Sets the URI of a file containing sample names to read.
 *
 * @param reader VCF reader object
 * @param samples_uri URI of file containing sample names, one per line, that
 *      will be read.
 * @return `TILEDB_VCF_OK` for success or `TILEDB_VCF_ERR` for error.
 */
TILEDBVCF_EXPORT int32_t tiledb_vcf_reader_set_samples_file(
    tiledb_vcf_reader_t* reader, const char* uri);

/**
 * Sets the URI of a BED file containing regions to be read.
 *
 * The BED file is assumed to follow the format of bcftools, a tab-separated
 * file of the format `contig   start   end` where the start/end interval
 * is a 0-based, half-open interval.
 *
 * @param reader VCF reader object
 * @param uri URI of BED file
 * @return `TILEDB_VCF_OK` for success or `TILEDB_VCF_ERR` for error.
 */
TILEDBVCF_EXPORT int32_t
tiledb_vcf_reader_set_bed_file(tiledb_vcf_reader_t* reader, const char* uri);

/**
 * Sets the one or more samples to be read.
 *
 * @param reader VCF reader object
 * @param samples CSV list of sample names.
 * @return `TILEDB_VCF_OK` for success or `TILEDB_VCF_ERR` for error.
 */
TILEDBVCF_EXPORT int32_t
tiledb_vcf_reader_set_samples(tiledb_vcf_reader_t* reader, const char* samples);

/**
 * Sets the one or more genomic regions to be read.
 *
 * @param reader VCF reader object
 * @param ranges CSV list of region strings. Each region string should be
 *      in the form "contig:start-end". The start and end positions must be
 *      1-indexed. The region is inclusive.
 * @return `TILEDB_VCF_OK` for success or `TILEDB_VCF_ERR` for error.
 */
TILEDBVCF_EXPORT int32_t
tiledb_vcf_reader_set_regions(tiledb_vcf_reader_t* reader, const char* regions);

/**
 * Sets the region partitioning info for the reader. The partitioning divides
 * the reader genomic regions (e.g. the BED ranges) according to a simple block
 * distribution.
 *
 * @param reader VCF reader object
 * @param partition Index of region partition that this reader object should
 *      process.
 * @param num_partitions Total number of region partitions.
 * @return `TILEDB_VCF_OK` for success or `TILEDB_VCF_ERR` for error.
 */
TILEDBVCF_EXPORT int32_t tiledb_vcf_reader_set_region_partition(
    tiledb_vcf_reader_t* reader, int32_t partition, int32_t num_partitions);

/**
 * Sets the sample partitioning info for the reader. The partitioning divides
 * the samples being read according to a simple block distribution.
 *
 * @param reader VCF reader object
 * @param partition Index of sample partition that this reader object should
 *      process.
 * @param num_partitions Total number of sample partitions.
 * @return `TILEDB_VCF_OK` for success or `TILEDB_VCF_ERR` for error.
 */
TILEDBVCF_EXPORT int32_t tiledb_vcf_reader_set_sample_partition(
    tiledb_vcf_reader_t* reader, int32_t partition, int32_t num_partitions);

/**
 * Sets a buffer to hold data for a specific attribute being read.
 *
 * The predefined attribute names are:
 *
 * - "sample_name": The sample name (var-len char)
 * - "contig": The contig name (var-len char)
 * - "pos_start": The 1-based record start position (int32)
 * - "pos_end": The 1-based record end position (int32)
 * - "query_bed_start": The 0-based BED query start position (int32)
 * - "query_bed_end": The 1-based BED query end position (int32)
 * - "alleles": CSV string of alleles (var-len char)
 * - "id": ID string (var-len char)
 * - "filters": CSV string of filter names (var-len char)
 * - "qual": The quality value (float)
 * - "info_*": A specific INFO field value (var-len uint8, see below)
 * - "fmt_*": A specific FMT field value (var-len uint8, see below)
 * - "fmt": Format byte blob of non-attribute fields (var-len uint8)
 * - "info": Info byte blob of non-attribute fields (var-len uint8)
 *
 * In general to access specific INFO or FMT field values, you should
 * use the special `fmt_*` / `info_*` attribute names. For example, to
 * retrieve the values of the `MIN_DP` format field, set a buffer for
 * attribute `fmt_MIN_DP`. The generic `fmt` and `info` byte blob attributes
 * are mostly available as an escape hatch.
 *
 * When retrieving info/fmt fields, the values stored in the buffers are typed
 * according to the actual field type. For example, if an INFO field `foo` is
 * listed in the BCF header as being a floating-point field, then the bytes
 * stored in the buffer `info_foo` will be floating-point values.
 *
 * If a record does not contain a value for the specified INFO or FMT field,
 * the value stored in the result buffer is a special null sentinel value
 * indicating "no value".
 *
 * @param reader VCF reader object
 * @param attribute Name of attribute
 * @param offset_buff_size Size (in bytes) of `offset_buff`.
 * @param offset_buff Buffer to hold offsets (NULL for fixed-length attributes).
 * @param buff_size Size (in bytes) of `buff`
 * @param buff Buffer to hold attribute data.
 * @return `TILEDB_VCF_OK` for success or `TILEDB_VCF_ERR` for error.
 */
TILEDBVCF_EXPORT int32_t tiledb_vcf_reader_set_buffer(
    tiledb_vcf_reader_t* reader,
    const char* attribute,
    int64_t offset_buff_size,
    int64_t* offset_buff,
    int64_t buff_size,
    void* buff);

/**
 * Sets the fixed amount of memory used *per attribute* in internal reader
 * buffers. The default is 200 MB per attribute.
 *
 * @param reader VCF reader object
 * @param memory_mb Fixed memory amount (in MB).
 * @return `TILEDB_VCF_OK` for success or `TILEDB_VCF_ERR` for error.
 */
TILEDBVCF_EXPORT int32_t tiledb_vcf_reader_set_memory_budget(
    tiledb_vcf_reader_t* reader, int32_t memory_mb);

/**
 * Sets the max number of records that will be read until the read status is
 * considered complete.
 *
 * @param reader VCF reader object
 * @param max_num_records Max number of records
 * @return `TILEDB_VCF_OK` for success or `TILEDB_VCF_ERR` for error.
 */
TILEDBVCF_EXPORT int32_t tiledb_vcf_reader_set_max_num_records(
    tiledb_vcf_reader_t* reader, int64_t max_num_records);

/**
 * Sets configuration parameters on the TileDB context used for internal
 * processing.
 *
 * The string should be of the format: "sm.option1=1000,sm.option2=baz,..."
 * with multiple TileDB config params separated by commas.
 *
 * @param reader VCF reader object
 * @param config CSV string of TileDB config param values.
 * @return `TILEDB_VCF_OK` for success or `TILEDB_VCF_ERR` for error.
 */
TILEDBVCF_EXPORT int32_t tiledb_vcf_reader_set_tiledb_config(
    tiledb_vcf_reader_t* reader, const char* config);

/**
 * Submits a blocking read operation.
 *
 * @param reader VCF reader object
 * @return `TILEDB_VCF_OK` for success or `TILEDB_VCF_ERR` for error.
 */
TILEDBVCF_EXPORT int32_t tiledb_vcf_reader_read(tiledb_vcf_reader_t* reader);

/**
 * Get the read status of the given reader.
 *
 * @param reader VCF reader object
 * @param status Set to the current read status
 * @return `TILEDB_VCF_OK` for success or `TILEDB_VCF_ERR` for error.
 */
TILEDBVCF_EXPORT int32_t tiledb_vcf_reader_get_status(
    tiledb_vcf_reader_t* reader, tiledb_vcf_read_status_t* status);

/**
 * Get the number of records in the result of the previous read operation.
 *
 * @param reader VCF reader object
 * @param num_records Set to the number of records in the result
 * @return `TILEDB_VCF_OK` for success or `TILEDB_VCF_ERR` for error.
 */
TILEDBVCF_EXPORT int32_t tiledb_vcf_reader_get_result_num_records(
    tiledb_vcf_reader_t* reader, int64_t* num_records);

/**
 * After reading some data, gets the size (in bytes) of a buffer holding reader
 * results.
 *
 * @param reader VCF reader object
 * @param attribute Name of attribute
 * @param offset_buff_size Set to the size (bytes) of the result offset buffer
 * @param buff_size Set to the size (bytes) of the result data buffer
 * @return `TILEDB_VCF_OK` for success or `TILEDB_VCF_ERR` for error.
 */
TILEDBVCF_EXPORT int32_t tiledb_vcf_reader_get_result_size(
    tiledb_vcf_reader_t* reader,
    const char* attribute,
    int64_t* offset_buff_size,
    int64_t* buff_size);

/**
 * Gets the number of buffers that have been previously set on the reader.
 *
 * @param reader VCF reader object
 * @param num_buffers Set to the number of buffers
 * @return `TILEDB_VCF_OK` for success or `TILEDB_VCF_ERR` for error.
 */
TILEDBVCF_EXPORT int32_t tiledb_vcf_reader_get_num_buffers(
    tiledb_vcf_reader_t* reader, int32_t* num_buffers);

/**
 * Gets a buffer (by index) that was previously set on the reader. The original
 * buffer sizes are returned (i.e. not the size of the result data).
 *
 * @param reader VCF reader object
 * @param buffer Index of buffer to get
 * @param name Set to the name of the buffer
 * @param offset_buff Set to the offsets buffer (set to null for fixed-length
 *      attributes).
 * @param offset_buff_size Set to the size (in bytes) of the offsets buffer.
 * @param data_buff Set to the data buffer.
 * @param data_buff_size Set to the size (in bytes) of the offsets buffer.
 * @return
 */
TILEDBVCF_EXPORT int32_t tiledb_vcf_reader_get_buffer(
    tiledb_vcf_reader_t* reader,
    int32_t buffer,
    const char** name,
    int64_t** offset_buff,
    int64_t* offset_buff_size,
    void** data_buff,
    int64_t* data_buff_size);

/**
 * Gets the datatype of the given attribute. Useful to determine the types of
 * values stored in the `info_*` / `fmt_*` fields.
 *
 * Returns an error if the specified attribute is unknown.
 *
 * @param reader VCF reader object
 * @param attribute Name of attribute to retrieve type of
 * @param datatype Set to the datatype of the attribute
 * @param var_len Set to `1` if the attribute is variable-length, else `0`
 * @return `TILEDB_VCF_OK` for success or `TILEDB_VCF_ERR` for error.
 */
TILEDBVCF_EXPORT int32_t tiledb_vcf_reader_get_attribute_type(
    tiledb_vcf_reader_t* reader,
    const char* attribute,
    tiledb_vcf_attr_datatype_t* datatype,
    int32_t* var_len);

/**
 * Returns the version number of the TileDB VCF dataset.
 *
 * @param reader VCF reader object
 * @param version Set to the version number
 * @return `TILEDB_VCF_OK` for success or `TILEDB_VCF_ERR` for error.
 */
TILEDBVCF_EXPORT int32_t tiledb_vcf_reader_get_dataset_version(
    tiledb_vcf_reader_t* reader, int32_t* version);

/**
 * Resets the reader without discarding any parameters or configuration
 * settings. This allows the same reader instance to be used for another read
 * operation, without having to reopen/reinitialize the dataset.
 *
 * @param reader VCF reader object
 * @return `TILEDB_VCF_OK` for success or `TILEDB_VCF_ERR` for error.
 */
TILEDBVCF_EXPORT int32_t tiledb_vcf_reader_reset(tiledb_vcf_reader_t* reader);

/**
 * Gets the last error from the reader object. Don't forget to free the error
 * object.
 *
 * @param reader VCF reader object
 * @param error Set to a newly allocated error object holding the last error.
 * @return `TILEDB_VCF_OK` for success or `TILEDB_VCF_ERR` for error.
 */
TILEDBVCF_EXPORT int32_t tiledb_vcf_reader_get_last_error(
    tiledb_vcf_reader_t* reader, tiledb_vcf_error_t** error);

/* ********************************* */
/*              WRITER               */
/* ********************************* */

/**
 * Allocate a VCF writer object.
 *
 * @param writer Will be set to point at the allocated writer object.
 * @return `TILEDB_VCF_OK` for success or `TILEDB_VCF_ERR` for error.
 */
TILEDBVCF_EXPORT int32_t tiledb_vcf_writer_alloc(tiledb_vcf_writer_t** writer);

/**
 * Free the given VCF writer object.
 *
 * @param writer Pointer to writer object to free.
 */
TILEDBVCF_EXPORT void tiledb_vcf_writer_free(tiledb_vcf_writer_t** writer);

/**
 * Initializes the writer for writing to a dataset at the given URI.
 *
 * @param writer VCF writer object
 * @param dataset_uri URI of dataset to be written to
 * @return `TILEDB_VCF_OK` for success or `TILEDB_VCF_ERR` for error.
 */
TILEDBVCF_EXPORT int32_t
tiledb_vcf_writer_init(tiledb_vcf_writer_t* writer, const char* dataset_uri);

/**
 * Sets the sample files to be registered or ingested.
 *
 * @param writer VCF writer object
 * @param sample_uris CSV list of sample URIs to be registered or ingested.
 * @return `TILEDB_VCF_OK` for success or `TILEDB_VCF_ERR` for error.
 */
TILEDBVCF_EXPORT int32_t tiledb_vcf_writer_set_samples(
    tiledb_vcf_writer_t* writer, const char* sample_uris);

/**
 * [Creation only] Sets the info and fmt fields that should be extracted as
 * separate TileDB attributes.
 *
 * @param writer VCF writer object
 * @param attributes CSV list of fields in the format `info_*` or `fmt_*`.
 * @return `TILEDB_VCF_OK` for success or `TILEDB_VCF_ERR` for error.
 */
TILEDBVCF_EXPORT int32_t tiledb_vcf_writer_set_extra_attributes(
    tiledb_vcf_writer_t* writer, const char* attributes);

/**
 * Creates a new TileDB-VCF dataset, using previously set parameters.
 *
 * @param writer VCF writer object
 * @return `TILEDB_VCF_OK` for success or `TILEDB_VCF_ERR` for error.
 */
TILEDBVCF_EXPORT int32_t
tiledb_vcf_writer_create_dataset(tiledb_vcf_writer_t* writer);

/**
 * Registers new samples into an existing TileDB-VCF dataset, using previously
 * set parameters.
 *
 * @param writer VCF writer object
 * @return `TILEDB_VCF_OK` for success or `TILEDB_VCF_ERR` for error.
 */
TILEDBVCF_EXPORT int32_t
tiledb_vcf_writer_register(tiledb_vcf_writer_t* writer);

/**
 * Ingests (stores) new samples into an existing TileDB-VCF dataset, using
 * previously set parameters.
 *
 * @param writer VCF writer object
 * @return `TILEDB_VCF_OK` for success or `TILEDB_VCF_ERR` for error.
 */
TILEDBVCF_EXPORT int32_t tiledb_vcf_writer_store(tiledb_vcf_writer_t* writer);

/**
 * Gets the last error from the writer object. Don't forget to free the error
 * object.
 *
 * @param writer VCF writer object
 * @param error Set to a newly allocated error object holding the last error.
 * @return `TILEDB_VCF_OK` for success or `TILEDB_VCF_ERR` for error.
 */
TILEDBVCF_EXPORT int32_t tiledb_vcf_writer_get_last_error(
    tiledb_vcf_writer_t* writer, tiledb_vcf_error_t** error);

/* ********************************* */
/*               ERROR               */
/* ********************************* */

/**
 * Gets the error message string from the error object.
 *
 * @param error VCF error object
 * @param errmsg Set to the error string
 * @return `TILEDB_VCF_OK` for success or `TILEDB_VCF_ERR` for error.
 */
TILEDBVCF_EXPORT int32_t
tiledb_vcf_error_get_message(tiledb_vcf_error_t* error, const char** errmsg);

/**
 * Free the given error object.
 *
 * @param reader Pointer to error object to free.
 */
TILEDBVCF_EXPORT void tiledb_vcf_error_free(tiledb_vcf_error_t** error);

#ifdef __cplusplus
}
#endif

#endif  // TILEDB_VCF_H
