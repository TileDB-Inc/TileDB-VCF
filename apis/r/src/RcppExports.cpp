// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// vcf_read
bool vcf_read(std::string& uri, std::vector<std::string>& attributes, std::string& regions, std::string& samples);
RcppExport SEXP _tiledbvcf_vcf_read(SEXP uriSEXP, SEXP attributesSEXP, SEXP regionsSEXP, SEXP samplesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string& >::type uri(uriSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string>& >::type attributes(attributesSEXP);
    Rcpp::traits::input_parameter< std::string& >::type regions(regionsSEXP);
    Rcpp::traits::input_parameter< std::string& >::type samples(samplesSEXP);
    rcpp_result_gen = Rcpp::wrap(vcf_read(uri, attributes, regions, samples));
    return rcpp_result_gen;
END_RCPP
}
// vcf_version
std::string vcf_version();
RcppExport SEXP _tiledbvcf_vcf_version() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(vcf_version());
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_tiledbvcf_vcf_read", (DL_FUNC) &_tiledbvcf_vcf_read, 4},
    {"_tiledbvcf_vcf_version", (DL_FUNC) &_tiledbvcf_vcf_version, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_tiledbvcf(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
