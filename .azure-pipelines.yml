trigger:
  branches:
    include:
    - master
    - release-*
    - refs/tags/*

variables:
  isRefTag: $[startsWith(variables['Build.SourceBranch'], 'refs/tags')]
  isMaster: $[eq(variables['Build.SourceBranch'], 'refs/heads/master')]

stages:
  - stage: CI
    condition: eq(variables.isRefTag, false)
    jobs:
    - job: Build
      strategy:
        matrix:
          linux:
            imageName: 'ubuntu-20.04'
            python.version: '3.x'
            CXX: g++
            BUILD_PYTHON_API: ON
            BUILD_SPARK_API: ON
            DOWNLOAD_TILEDB_PREBUILT: ON
            ARTIFACT_NAME: linux
          linux_tiledb_source_build:
            imageName: 'ubuntu-20.04'
            python.version: '3.x'
            CXX: g++
            BUILD_PYTHON_API: OFF
            BUILD_SPARK_API: OFF
            DOWNLOAD_TILEDB_PREBUILT: OFF
            ARTIFACT_NAME: linux_tiledb_source_build
          macos:
            imageName: 'macOS-11'
            python.version: '3.7'
            CXX: clang++
            BUILD_PYTHON_API: ON
            BUILD_SPARK_API: ON
            DOWNLOAD_TILEDB_PREBUILT: ON
            #SDKROOT: '/Applications/Xcode_10.3.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.14.sdk'
            ARTIFACT_NAME: macos
      pool:
        vmImage: $(imageName)
      steps:
      - task: UsePythonVersion@0
        inputs:
          versionSpec: '$(python.version)'
          architecture: 'x64'
      - script: printenv
        displayName: 'Print Env'
      - template: ci/azure-linux_mac.yml

  - stage: Docker
    condition: or(succeeded(), eq(variables.isRefTag, true))
    jobs:
      - job: Build
        pool:
          vmImage: 'ubuntu-22.04'
        strategy:
          matrix:
            cli:
              dockerfile: docker/Dockerfile-cli
              repository: tiledb/tiledbvcf-cli
              context: .
              test_cmd: version
            python:
              dockerfile: docker/Dockerfile-py
              repository: tiledb/tiledbvcf-py
              context: .
              test_cmd: -c "import tiledbvcf; print(tiledbvcf.version)"
            # dask:
            #   dockerfile: docker/Dockerfile-dask-py
            #   repository: tiledb/tiledbvcf-dask
            #   context: .
        steps:
        - template: ci/build-images.yml

  - stage: BuildNativeLibs
    condition: or(eq(variables.isMaster, true), eq(variables.isRefTag, true))
    jobs:
      - job: Linux_OSX
        strategy:
          matrix:
            linux:
              imageName: 'ubuntu-20.04'
              python.version: '3.x'
              CXX: g++
              BUILD_PYTHON_API: ON
              BUILD_SPARK_API: ON
            mac:
              imageName: 'macOS-11'
              python.version: '3.7'
              CXX: clang++
              BUILD_PYTHON_API: ON
              BUILD_SPARK_API: ON
              #SDKROOT: '/Applications/Xcode_10.3.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.14.sdk'

        pool:
          vmImage: $(imageName)
        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '$(python.version)'
              architecture: 'x64'
          - script: printenv
            displayName: 'Print Env'
          - template: ci/native_libs-linux_osx.yml

  - stage: GitHubRelease
    condition: eq(variables.isRefTag, true)
    jobs:
      - job: All_OS
        strategy:
          matrix:
            ubuntu_18:
              imageName: 'ubuntu-20.04'
        pool:
          vmImage: $(imageName)

        steps:
          - download: current
            patterns: '**/*.tar.gz'

          - bash: |
              unset SYSTEM
              set +e
              ci/collect-nativelibs.sh

          - task: ArchiveFiles@2
            inputs:
              rootFolderOrFile: '$(Build.BinariesDirectory)'
              includeRootFolder: false
              archiveType: 'tar' # Options: zip, 7z, tar, wim
              tarCompression: 'gz' # Optional. Options: gz, bz2, xz, none
              archiveFile: $(Build.ArtifactStagingDirectory)/tiledb-vcf-jar-$(Build.SourceBranchName).tar.gz
              replaceExistingArchive: true
              verbose: true # Optional
            condition: succeeded()

          - task: PublishBuildArtifacts@1
            inputs:
              pathtoPublish: $(Build.ArtifactStagingDirectory)/tiledb-vcf-jar-$(Build.SourceBranchName).tar.gz
              artifactName: libraries
            condition: succeeded()

          - task: GithubRelease@0
            displayName: 'GitHub Release'
            inputs:
              gitHubConnection: 'TileDB-Inc-Release'
              repositoryName: TileDB-Inc/TileDB-VCF
              tag: $(Build.SourceBranchName)
              action: "edit"
              isDraft: true
              assets: $(Build.BinariesDirectory)/jars/*.jar
